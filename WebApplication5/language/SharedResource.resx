<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Active" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="Active Only" xml:space="preserve">
    <value>Active Only</value>
  </data>
  <data name="Add Department" xml:space="preserve">
    <value>Add Department</value>
  </data>
  <data name="Add New Department" xml:space="preserve">
    <value>Add Department</value>
  </data>
  <data name="Add To Project" xml:space="preserve">
    <value>Add To Project</value>
  </data>
  <data name="address" xml:space="preserve">
    <value>address</value>
  </data>
  <data name="address must like 12-Street name-cityname-countryname" xml:space="preserve">
    <value>address must like 12-Street name-cityname-countryname</value>
  </data>
  <data name="Address required" xml:space="preserve">
    <value>Address required</value>
  </data>
  <data name="All" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="Arabic" xml:space="preserve">
    <value>عربي</value>
  </data>
  <data name="Are you sure you want Delete Employee?" xml:space="preserve">
    <value>Are you sure you want Delete Employee?</value>
  </data>
  <data name="Are you sure you want to Delete Department?" xml:space="preserve">
    <value>Are you sure you want to Delete Department?</value>
  </data>
  <data name="Assign" xml:space="preserve">
    <value>Assign</value>
  </data>
  <data name="Assign Employee To Project" xml:space="preserve">
    <value>Assign Employee To Project</value>
  </data>
  <data name="Back To Data" xml:space="preserve">
    <value>Back To Data</value>
  </data>
  <data name="Bounce Rate" xml:space="preserve">
    <value>Bounce Rate</value>
  </data>
  <data name="can delete not started and running project only" xml:space="preserve">
    <value>can delete not started and running projects only</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Cant Delete project finished" xml:space="preserve">
    <value>Cant Delete project finished</value>
  </data>
  <data name="cant update finished project" xml:space="preserve">
    <value>cant update finished project</value>
  </data>
  <data name="Card Option" xml:space="preserve">
    <value>Card Option</value>
  </data>
  <data name="Change CV" xml:space="preserve">
    <value>Change CV</value>
  </data>
  <data name="Change photo" xml:space="preserve">
    <value>Change photo</value>
  </data>
  <data name="Choose Department" xml:space="preserve">
    <value>Choose Department</value>
  </data>
  <data name="Choose Project" xml:space="preserve">
    <value>Choose Project</value>
  </data>
  <data name="Comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Create new Employee" xml:space="preserve">
    <value>Create new Employee</value>
  </data>
  <data name="Create New Project" xml:space="preserve">
    <value>Create New Project</value>
  </data>
  <data name="CV" xml:space="preserve">
    <value>CV</value>
  </data>
  <data name="Dashboard" xml:space="preserve">
    <value>Dashboard</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Delete Department" xml:space="preserve">
    <value>Delete Department</value>
  </data>
  <data name="Delete Employee" xml:space="preserve">
    <value>Delete Employee</value>
  </data>
  <data name="Delete Project" xml:space="preserve">
    <value>Delete Project</value>
  </data>
  <data name="department" xml:space="preserve">
    <value>department</value>
  </data>
  <data name="Department Card" xml:space="preserve">
    <value>Department Card</value>
  </data>
  <data name="Departments" xml:space="preserve">
    <value>Departments</value>
  </data>
  <data name="Disabled" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="Download CV" xml:space="preserve">
    <value>Download CV</value>
  </data>
  <data name="Email address" xml:space="preserve">
    <value>Email address</value>
  </data>
  <data name="Employee" xml:space="preserve">
    <value>Employee</value>
  </data>
  <data name="Employee Card" xml:space="preserve">
    <value>Employee Card</value>
  </data>
  <data name="Employee Details" xml:space="preserve">
    <value>Employee Details</value>
  </data>
  <data name="Employee required" xml:space="preserve">
    <value>Employee required</value>
  </data>
  <data name="Employees" xml:space="preserve">
    <value>Employees</value>
  </data>
  <data name="Employees Count" xml:space="preserve">
    <value>Employees Count</value>
  </data>
  <data name="EmployeesCard" xml:space="preserve">
    <value>Employees Card</value>
  </data>
  <data name="Enter Address" xml:space="preserve">
    <value>Enter Address</value>
  </data>
  <data name="Enter HireDate" xml:space="preserve">
    <value>Enter HireDate</value>
  </data>
  <data name="Enter Hours" xml:space="preserve">
    <value>Enter Hours</value>
  </data>
  <data name="Enter Location" xml:space="preserve">
    <value>Enter Location</value>
  </data>
  <data name="Enter Name" xml:space="preserve">
    <value>Enter Name</value>
  </data>
  <data name="Enter Phone" xml:space="preserve">
    <value>Enter Phone</value>
  </data>
  <data name="Enter Salary" xml:space="preserve">
    <value>Enter Salary</value>
  </data>
  <data name="Enter valid phone number" xml:space="preserve">
    <value>Enter valid phone number</value>
  </data>
  <data name="Finish Date" xml:space="preserve">
    <value>Finish Date</value>
  </data>
  <data name="Finishdate is required" xml:space="preserve">
    <value>Finishdate is required</value>
  </data>
  <data name="Finished" xml:space="preserve">
    <value>Finished</value>
  </data>
  <data name="Hiredate" xml:space="preserve">
    <value>Hiredate</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Hours" xml:space="preserve">
    <value>Hours</value>
  </data>
  <data name="hours Required" xml:space="preserve">
    <value>hours Required</value>
  </data>
  <data name="ID" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="IsActive" xml:space="preserve">
    <value>IsActive</value>
  </data>
  <data name="location" xml:space="preserve">
    <value>location</value>
  </data>
  <data name="location is required" xml:space="preserve">
    <value>location is required</value>
  </data>
  <data name="ltr" xml:space="preserve">
    <value>ltr</value>
  </data>
  <data name="Mail Address is Required" xml:space="preserve">
    <value>Mail Address is Required</value>
  </data>
  <data name="Message" xml:space="preserve">
    <value>Message</value>
  </data>
  <data name="Message is Required" xml:space="preserve">
    <value>Message is Required</value>
  </data>
  <data name="min length is 2" xml:space="preserve">
    <value>min length is 2</value>
  </data>
  <data name="min length is 3" xml:space="preserve">
    <value>min length is 3</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="Name is required" xml:space="preserve">
    <value>Name is required</value>
  </data>
  <data name="Not started Yet" xml:space="preserve">
    <value>Not started Yet</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="password is Required" xml:space="preserve">
    <value>password is Required</value>
  </data>
  <data name="phone" xml:space="preserve">
    <value>phone</value>
  </data>
  <data name="Photo" xml:space="preserve">
    <value>Photo</value>
  </data>
  <data name="Project" xml:space="preserve">
    <value>Project</value>
  </data>
  <data name="Project Card" xml:space="preserve">
    <value>Project Card</value>
  </data>
  <data name="Project Details" xml:space="preserve">
    <value>Project Details</value>
  </data>
  <data name="Project status" xml:space="preserve">
    <value>Project status</value>
  </data>
  <data name="Projects" xml:space="preserve">
    <value>Projects</value>
  </data>
  <data name="Running" xml:space="preserve">
    <value>Running</value>
  </data>
  <data name="Salary" xml:space="preserve">
    <value>Salary</value>
  </data>
  <data name="Salary is required" xml:space="preserve">
    <value>Salary is required</value>
  </data>
  <data name="Select Department" xml:space="preserve">
    <value>Select Department</value>
  </data>
  <data name="Send" xml:space="preserve">
    <value>Send</value>
  </data>
  <data name="Send Mail" xml:space="preserve">
    <value>Send Mail</value>
  </data>
  <data name="SignOut" xml:space="preserve">
    <value>SignOut</value>
  </data>
  <data name="Specify Department" xml:space="preserve">
    <value>Specify Department</value>
  </data>
  <data name="Start Date" xml:space="preserve">
    <value>Start Date</value>
  </data>
  <data name="startdate is required" xml:space="preserve">
    <value>startdate is required</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="title is Required" xml:space="preserve">
    <value>title is Required</value>
  </data>
  <data name="Unique Visitors" xml:space="preserve">
    <value>Unique Visitors</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="update Department" xml:space="preserve">
    <value>update Department</value>
  </data>
  <data name="update Employee" xml:space="preserve">
    <value>update Employee</value>
  </data>
  <data name="Update Project" xml:space="preserve">
    <value>Update Project</value>
  </data>
  <data name="Warning" xml:space="preserve">
    <value>Warning</value>
  </data>
</root>